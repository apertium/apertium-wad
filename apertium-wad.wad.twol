! TODO:
! /a/ deletion in verbs (dissertation 2.3.4, page 54/72)
! reduplication should probably just be lexical
! ve page 206/224
! affixes page 196/214

Alphabet
 A B D E G I J K L M N O P R S T U V W Y Z Ŋ
 a b d e g i j k l m n o p r s t u v w y z ŋ
 %{A%}:a %{A%}:0 ! as I proceed to deal with /a/ deletion in the laziest way possible
 %>:0
 %{B%}:b
 %{D%}:d

  %[%+1incdu%]:0 %[%+1incpl%]:0 %[%+1sg%]:0 %[%+1excdu%]:0 %[%+1excpl%]:0 %[%+2sg%]:0 %[%+2du%]:0 %[%+2pl%]:0 %[%+3sg%]:0 %[%+3du%]:0 %[%+3plhum%]:0 %[%+3plnh%]:0  %[%-1incdu%]:0 %[%-1incpl%]:0 %[%-1sg%]:0 %[%-1excdu%]:0 %[%-1excpl%]:0 %[%-2sg%]:0 %[%-2du%]:0 %[%-2pl%]:0 %[%-3sg%]:0 %[%-3du%]:0 %[%-3plhum%]:0 %[%-3plnh%]:0

 %[%+appl%]:0 %[%-appl%]:0
 %[%+caus%]:0 %[%-caus%]:0
 ;

Sets

Prefix = %[%+1incdu%] %[%+1incpl%] %[%+1sg%] %[%+1excdu%] %[%+1excpl%] %[%+2sg%] %[%+2du%] %[%+2pl%] %[%+3sg%] %[%+3du%] %[%+3plhum%] %[%+3plnh%] ;

Suffix = %[%-1incdu%] %[%-1incpl%] %[%-1sg%] %[%-1excdu%] %[%-1excpl%] %[%-2sg%] %[%-2du%] %[%-2pl%] %[%-3sg%] %[%-3du%] %[%-3plhum%] %[%-3plnh%] ;

HighVow = I U i u ;
Glides  = J W j w ;

Vowel = A E Ä I O Ö U Ü Y Ý 
        a e ä i o ö u ü y ý ;

Consonants = M N Ŋ P B T D K G V S J R L
 	         m n ŋ p b t d k g v s j r l ;

NotM = N Ŋ P B T D K G V S J R L
       n ŋ p b t d k g v s j r l ;

NotN = M Ŋ P B T D K G V S J R L
       m ŋ p b t d k g v s j r l ;

NotNG = M N P B T D K G V S J R L
        m N p b t d k g v s j r l ;

NeverCluster = M N Ñ P T S J L
	           m n Ñ p t s j l ;

Nasals = M N Ŋ
       	 m n ŋ ;

VRK = V R K
      v r k ;

BDG = B D G
      b d g ;

Rules

"High vowels -> glides"
HighVow:Glides <=> .#. _ ;
	           :Vowel _ :Vowel ;

"Mid vowel raising"
e:i <=> _ :u ;

"No duplicate vowels"
Vx:0 <=> Vx: %>: _ ;
     where Vx in Vowels ;

"Consonant cluster simplification"
Cx:0 <=> _ %>: NeverCluster: ;
     where Cx in Consonants ;

"Consonant cluster simplification for mismatched nasal-stop clusters"
Cx:0 <=> _ %>: :Cy ;
     where Cx in Nasals
     	   Cy in BDG
     mixed ;

! is it possible to do this with one rule? maybe
! do I know how? no
"VRK mutation 1 v-m"
Cx:m <=> _ %>: :b ;
     where Cx in NotM ;
"VRK mutation 1 r-n"
Cx:n <=> _ %>: :d ;
     where Cx in NotN ;
"VRK mutation 1 k-ŋ"
Cx:ŋ <=> _ %>: :g ;
     where Cx in NotNG ;

"VRK mutation 2"
Cx:Cy <=> Consonants: %>: _ ;
      where Cx in VRK
      	    Cy in BDG
      matched ;

"2SG infix 1"
%{B%}:Cx <=> _ u: %>: Cx: ;
	 where Cx in Consonants ;

"2SG infix 2"
Cx:0 <=> %{B%}: u: %>: _ ;
     where Cx in Consonants ;

"3SG infix 1"
%{D%}:Cx <=> _ i: %>: Cx: ;
	 where Cx in Consonants ;

"3SG infix 2"
Cx:0 <=> %{D%}: i: %>: _ ;
     where Cx in Consonants ;

! This seems to break something
! "Optional -e after word-final consonant"
! 0:e <= :Consonants _ .#. ;

! Resources:
! https://wiki.apertium.org/wiki/Starting_a_new_language_with_HFST#Enter_twol
! https://kitwiki.csc.fi/twiki/bin/view/KitWiki/HfstHome
! https://github.com/hfst/
! https://wiki.apertium.org/wiki/Twol
! https://wiki.apertium.org/wiki/Hfst

